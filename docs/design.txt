nstd library

== Goals

*   Playpen to try ideas.
*   Library of generic code.  Container types, meta-programming helpers, etc.
*   Consistency in design and implementation.
*   Minimized dependencies, in interfaces and across SW layers.
*   Modernize to take advantage of:
    **  C++11 features like lambdas, variadic templates, and perfect-forwarding.
    **  Type erasure techniques.
*   Performance.
*   Support embedded platforms, where exceptions and RTTI are missing.
    **  Exception-free versions of *interfaces*.
*   Document new design patterns and implementation patterns.
*   Simple, debuggable implementations wherever possible.
*   Reasonably fast compilation: limited header deps, separate compilation, etc.


== Summary of Features

*   Generic assignment.
    **  General support for construct-only types.
*   Support for external type-traits via decltype(adl_function()).
*   Custom allocator support.
    **  With support for memory-pool *instances*.  As opposed to STL allocator which must be global.
*   Smart Pointers
    **  More policy options, so you can opt for true interface parity with pointers.
        e.g. support for implicit cast operators
    **  Shared pointer that doesn't pay the cost of supporting a weak pointer.
*   Containers
    **  Minimal core types.  (encapsulate only essentials, and keep convenience functions external)
    **  Performant facade types.
    **  Non-owning container types that implement a container interface over some existing storage.
    **  Variants geared towards unspecified-type support.  "type-erasure-lite"
    **  Iterator parity across associative and non-associative types.
    **  Smoother interoperability between containers of the same essential type, that differ
        only by type-traits or other template args.
*   nstd::function, a better version of std::function
    **  Generic assignment support.  Solves the "non-copyable lambda" problem.
    **  Small-buffer optimization controllable by user.
        *** auto func = nstd::make_function([=foo]() {return foo;});
    **  As copyable and movable as the underlying bound type.
        *** Exceptional mode: throws
        *** Exception-free mode: rhs unchanged, and lhs set to "null" state.
    **  Does *not* support pointer-to-member.  Only function-pointer & object.


== Generic Assignment

Assignment operators are incapable of assigning const members, and members of reference type,
whereas the equivalent constructors are [of course].  This leads to awkward situations where
copy/move-constructible types are not copy/move-assignable in a reasonable way.

Common workarounds involve redefining members as assignable entities -- removing const, or changing
references to pointers -- effectively sacrifices type-safety for assignability.  It's a trade-off
we shouldn't have to make.

The straightforward solution is to define a generic_assign<T, U>(lhs, rhs) function that is
overloaded to either call the assignment operator if it exists, or else fall back to
destructing then re-constructing the lhs.  All assignments needing this behavior
(invocations of operator=) would then be replaced by calls to generic_assign.

Note that this is not advocating implementing a type's operator= in terms of
destruct(this)-then-construct(this).  That clearly doesn't work with inheritance.

Performing a generic_assign() is legitimate in every case where value assignment would be.


=== Language Change?

Ideally, the language would be amended so that an '=' would perform the equivalent of
generic_assign.  But, this would break tons of code out there, that implements the
copy-ctor with a call to this->operator=.  The next best thing might be a new operator,
like a fat arrow '<=='.



== Smart Pointers

*   Freedom to choose certain policies.
    **  Types with interface parity with raw-pointers.
    **  Raw-pointer wrapper that has interface parity with std::unique_ptr.
*   Graceful methods for static and dynamic casts.
*   Variant of shared-pointer that does not support weak-pointer.
    This can be built on top of intrusive_ptr.
*   Threadsafe and non-threadsafe versions of refcounting.


=== STL Analysis

STL (and boost) smart pointers are perverse: they don't have the same interface as pointers!
This makes converting between raw-pointers and smart-pointers in existing code very expensive.

.shared_ptr:

*   It's a code-virus.  Cannot convert from raw -> shared ... unless you inherit from some
    specific base-class to make it an intrusive refcount -- which makes it a poorly designed
    subset of intrusive_ptr.
*   Support for weak_ptr necessarily reduces performance; rather than a simple atomic refcount,
    the implementation must take some kind of lock on the "control-structure".
*   std::make_shared doesn't take an allocator policy.
*   std::make_shared may allocate the object and control-structure in one uber-allocation.
    This effectively makes all weak-pointers into strong-pointers w.r.t. allocation lifetime.




== Container Types

*   Vector variants
    **  all supporting generic_assign
    **  all supporting functor-based Append
    **  optional support for type-erased allocator
    **  specified and unspecified variants
*   IntrusiveSet variants
    **  variant that supports unspecified type (unlike boost where type must be visible
        for declaration, when using a member-hook)
    **  Provide a non-templated version of red-black-tree, avl-tree, etc. that the templated
        versions can call -- to avoid re-instancing the same code repeatedly.
        A form of type erasure.
*   Set types with greater flexibility than "tranditional" map types.
    **  Discourage the std::map interface.
*   VanEmdeBoas Tree
    **  cache-oblivious layout per subtree
    **  at some point, need to sub-allocate
*   Binary Tree Vector
    **  all operations are O(log N)
    **  provides random-access iterators
*   Finger Trees
*   Immutable data structures


=== Type-Erased Allocators for Containers

*   Members:
    **  char* Alloc(size_t);
    **  void Free(char*);
*   Allocator objects should be passed-by-reference and held-by-pointer in containers.


== Container Facades

Here we define facades as types that inherit from an exist type, so that a client may
simply cast an original object to the facade type and use it with no space or indirection
penalty.

Facade types have the following benefits:

*   Adapt an object with one interface as another.  (e.g. make a nstd::Vector look like a std::vector)
*   Provide a delivery mechanism for convenience-functions, callable with member-syntax, without
    polluting the core type.
    **  Free functions callable via ADL are also a good option.  But member-syntax works
        better with auto-completion.  Why not both.
*   Provides a pattern for user-extensibility.

Guidelines:

*   Facades should inherit from the core type (or another facade), as a matter of convention.
    **  This avoids introducing a layer of pointer-indirection (which would wreck perf).
    **  This is compatible with the strict-aliasing rule, since derived types are related.
*   Facades should not contain additional state, to be compatible with the inheritance
    and cast strategy.  (they shouldn't need extra state either)



== Non-Owning Views

These are a type of adapter, that "attach" to existing storage, and present a container view
of it.  Prime examples:

*   vector over static buffer, or stack buffer
*   string over char[]

Const views are especially valuable over pre-baked data (.rodata) which must be POD.
e.g.
    auto str = nstd::MakeStringView("stuff");
    str.length();





== Iterators

=== Iterator Parity

In the STL and the boost, vector and set iterators behave differently from map iterators.

*   For vector and set, dereference operator returns element&.
*   For maps, operator returns a std::pair<Key,Value>.

To correct this, we can split map iterators into 3 categories:

*   A "key iterator", where dereferencing returns a Key&.
*   A "value iterator", where dereferencing returns a Value&.
*   An "element iterator", where dereferencing returns a pair<Key,Value>&.

We can make all these types inter-convertible, and we can add a key() and value()
method to all iterators.  Since we want consistency, vector and set iterators should also
implement these, but return the same element& for both.


=== Binary-Tree Iterators

aka Binary-Traversal Iterators

*   Have methods left(), right(), parent()
*   Supportable on sorted arrays naturally:
    **  Root is the center, left() and right() are half the distance to each node's range.
    **  Iterator must keep a triple of {lo, mid, hi}.


=== N-Ary Tree Iterators



== Type Erasure "Framework"

Factor the problem into:

*   Interface: any type, although the point is to have virtual functions and references to
    mandatory data members.
*   Underlying: object that is structurally similar to an interface, but doesn't
    inherit from it.
*   Adapter: implements an interface, by holding and forwarding to the underlying
*   make_adapter: free function callable by ADL to convert an underlying into an interface
*   Container: like a smart pointer on an interface, that calls make_adapter when needed
    and supports value copy operations in certain cases



== Exception-Free Design

Exception-free design is about creating types and interfaces that intrinsically cannot fail
in ways that require exceptions.  This goes beyond exception-neutrality, into the
territory of all-noexcept code.

Design-level strategies:

*   Prefer infallible interfaces.
    **  boost::intrusive_set::insert() is infallible, since it doesn't need to allocate.
        As opposed to std::set or std::vector insert, which may throw std::bad_alloc.
    **  boost::intrusive_ptr<> is infallible, since the refcount doesn't need to be
        separately allocated.  As opposed to std::shared_ptr.
*   Define pre-conditions on functions, pushing error-checking responsibility to
    the caller, who may more efficiently enforce the guarantee [by design, or in batch].
    **  e.g. don't error-check each vector[index]; caller should bound index against size()
*   "Builder pattern" -- for each long-lived "real" object type, define a short-lived
    builder type that acts as the real object's constructor argument.
    **  Most builder types are mutable, as each field must be assigned individually
        with localized error-checking.
    **  Move fields into the real object.  (builder is one-time-use)
*   Immutable objects where possible.
    **  "Builder pattern" isolates potential points of failure to before an object's construction.
*   Separate memory-management from algorithms where possible.
    Might sound counter to RAII, but these can be *local* transformations.
    **  Pre-allocate memory for results, separate from running an algorithm to populate them.
    **  For dynamically sized results, pre-allocate a pool containing the upper-bound.


Code-level strategies:

*   All functions are noexcept.
*   Return error-codes (or error-objects) in place of exceptions.
*   Always construct objects with new (std::nothrow), or placement-new.
*   Ensure class-constructors can never fail.
    **  Never allocate memory inside a constructor.
    **  Never call a function that can throw in a constructor.
    **  Option: Builder pattern.
    **  Option: Give the class a safe default-constructor, followed by in-place mutation.
        [suitable for container types that are mutable by nature]
        [or just the old Init() function pattern]
    **  Option: "monadic" objects that have a sticky "valid" state.
        NOT recommended
        http://gamedev.stackexchange.com/questions/46424/try-catch-or-ifs-for-error-handling-in-c
        *** Allows ordinary C++ copies to work, with delayed evaluation of validity.
        *** Must check validity in all uses "defensively", which is the ultimate maintenance
            nightmare and death-by-a-thousand-cuts perf killer.
        *** This is like every sub-allocating object being intrinsically "nullable".
    **  Can hide the construction logic behind a free factory function.
        i.e. private constructor, and private or anonymous-namespaced "builder" type
*   Define a known state for all types that fail allocations.
    **  Vector that failed a reallocate should retain previous state.
*   For non-monadic style:
    Ban copy-constructors/assignment, in favor of ADL-invoked
        bool clone(char* dst, const T& src);    // copy-construct
        bool clone(T& dst, const T& src);       // copy-assign, optional
    **  Consider copy-construction of a vector<string> -- without exceptions, an ordinary
        copy-construct/assign cannot propagate failures without the caller comparing
        every element.
    **  With clone(), the error is reported recursively.
        *** It's the equivalent of the compiler-generated copy-constructor, just with a bool
            result propagated out.
        *** It could be generated by an offline tool (using clang AST).
        *** Default implementation can be provided in library for trivially copyable data structures.
    **  A failed clone() must still legitimately destruct.
*   Avoid dynamic allocations unless absolutely necessary.


=== Algorithmic Performance

Exception-neutral code may still suffer algorithmic performance degradation to
maintain invariance.  For example:

*   vector.insert()
    **  For the simple case of appending, each element must be appended one at a time,
        incrementing the container size by 1 on each iteration.  Necessary in case
        the copy-construction of T throws, to guarantee the container size is consistent.
        The more optimal solution would update the size only once, for a noexcept T.
    **  A more severe example is insertion-in-the-middle.  The optimal solution would
        first slide elements over, then copy new values into the empty slots.  Sliding
        elements requires starting from the end-element.  If the second element to be
        moved calls a throwing copy-constructor then there may be a "hole" in the
        raw array containing non-constructed element memory.
        *** The Microsoft STL uses an append+rotate strategy = ~3N operations = 3x slower than optimal,
            just to remain exception-safe.
        *** An alternative might be to append default-constructed elements for each new element
            before performing the slide.
            The STL could do this, but requiring a default-constructor is at odds with our
            container type usability goals.  Default-construction also would add overhead
            as compared to not requiring it at all.
*   Simple memory allocations always need an RAII wrapper that is moved-from on success,
    implying an extra mandatory destructor with if-statement evaluation even in the success path.





